"""
Author: Egheosa Ogbomo
Date: 11/10/2023

An implementation of a genetic algoritm that:

- Allows user to generate varying lengths of molecules for optimisation
- Define their own fitness function (an ML algorithm or MD simulation framework)
- Remove molecules with undesired substructures from populations
- Define likelihood of different mutations/crossovers occuring
- Store SMILES strings and evaluations of valid(?) molecules from each generation in csv
- Allow users to define which elements and mutations are allowed from a database (which can be in csv form)
- Remove disconnected fragments
- Check for molecular similarity
- Illustrate mutated molecules between generations
- Plot an illustration of generated molecules as a word embedding
- Find most common substructure present within a generation of champion molecules to advise future generations
- Limit number of atoms generated by algorithm
- Generate options that conform to a specific type of base oils (e.g. PAO/silicone oils)
- Impose maximum number of heavy atoms
- Recreate and visualise certain mutations

Possible Mutations
- Add Atom
- Replace Atom
- Change Bond Order
- Add Fragment 
- Replace Fragment

CONSTRAINTS

- Allow only one mutation per generation

CONSIDERATIONS

- Think about using Python pickle structure to save molecules for speeding up molecule loading

- Maybe a way to store the history of mutations made to a molecule, so that we can adjust (reduce) probabilities of certain
mutations occurring and reoccuring based on past events, increasing range of molecules chekced out.

- Can we keep track of modifications, and track how each legal modification to impacts (i.e. increases or decreases)
visosity/conductivity to determine which modifications are best

- Best way to initialise population

- How to penalise long surviving molecules to encourage even greater diversity in later generations

- Need to determine how to handle crossovers

- How to know if something is a gas or liquid

- Are we only going to add to end points
    - Maybe a coinflip or some form of distribution to determine which alteration is made

- Decide a protocol for adding branches top 

- How to implement a validity check before evaluating the fitness of molecules in a generation and which validity checks
to implement

- Can the molecule be parameterised?

- How to ensure that we are actually generating molecules that will be liquid at room temperature (how do we design 
gaseous lubricants)

- Need to decide best fingerprint for calculating molecular similarity

- Need to make sure that there are no duplicates in a given generation

- Need a parameter for elitism
"""

################# IMPORTS ###################

from rdkit import Chem
from rdkit.Chem import Draw
import rdkit
from random import sample
from rdkit.Chem import AllChem
from rdkit.Chem.Draw import MolDrawing, DrawingOptions
from rdkit.Chem import rdFMCS
from rdkit.Chem.Draw import rdDepictor
from random import choice as rnd
from rdkit.Chem.Draw import rdMolDraw2D
from MoleculeDifferenceViewer import view_difference

DrawingOptions.includeAtomNumbers=True
DrawingOptions.bondLineWidth=1.8
DrawingOptions.atomLabelFontSize=14

### Fragments
fragments = ['CCCC', 'CCCCC', 'CCCCCCC', 'CCCCCCCC', 'CCCCCCCCC', 'CCCCCCCCCC', 'c1ccccc1']
fragments = [Chem.MolFromSmiles(x) for x in fragments]

#print(Chem.GetPeriodicTable())

### ATOM NUMBERS
Atoms = ['C', 'O']
AtomMolObjects = [Chem.MolFromSmiles(x) for x in Atoms]
AtomicNumbers = []

# Getting Atomic Numbers for Addable Atoms
for Object in AtomMolObjects:
     for atom in Object.GetAtoms():
          AtomicNumbers.append(atom.GetAtomicNum())         

### BOND TYPES
BondTypes = [Chem.BondType.SINGLE, Chem.BondType.DOUBLE, Chem.BondType.TRIPLE]

"""
1. Combine molecules into a singular SMILES object 
2. Create separate objects for each fragment in SMILES string 
3. Check bond types for each bond for each atom in each fragment, maybe create separate list containing atoms with each 
bond type
4. Check whether bonds are aromatic, will need to Kekulize SMILES strings to enable this
5. Check number of rings in the structure
5. Assign probablilities to each potential mutation
6. Select a mutation based on probabilities, taking into account information from starting structure (just start with 
random probabilities)
"""

def AddAtom(StartingMolecule, NewAtoms, showdiff=False):
    """
    Function that adds atom from a list of selected atoms to a starting molecule.

    Need to ensure that probability of this is zero if length of molecule is too short.

    Takes molecule, adds atom based on defined probabilities of position.

    Arguments:
        - StartingMolecule: SMILES String of Starting Molecule
        - NewAtoms: List of atoms that could be added to starting molecule
        - Show Difference: If True, shows illustration of changes to molecule
    """
    Starting_molecule_Unedited = StartingMolecule

    # Change to an editable object
    Starting_molecule = Chem.RWMol(Starting_molecule_Unedited)

    # Add selected atom from list of addable atoms 
    Starting_molecule.AddAtom(Chem.Atom(int(rnd(NewAtoms))))

    # Storing indexes of newly added atom and atoms from intial molecule
    frags = Chem.GetMolFrags(Starting_molecule)

    # Check which object is the newly added atom
    for ind, frag in enumerate(frags):
        print(ind, frag)
        if len(frag) == 1:
            #Store index of new atom in object
            NewAtomIdx = frags[ind]
        else:
            StartMolIdxs = frags[ind]
    
    Starting_molecule.AddBond(rnd(StartMolIdxs), NewAtomIdx[0], rnd(BondTypes))

    # SMILES string chemical validity check
    Mut_Mol = Starting_molecule.GetMol()
    Mut_Mol_Sanitized = Chem.SanitizeMol(Mut_Mol, catchErrors=True) 

    if Mut_Mol_Sanitized == rdkit.Chem.rdmolops.SanitizeFlags.SANITIZE_NONE:
        print('Validity Check Passed')
    else:
        print('Validity Check Failed')
   
    if showdiff:
        view_difference(Starting_molecule_Unedited, Mut_Mol)

### TESTING AddAtom Function
#AddAtom(rnd(fragments), AtomicNumbers, showdiff=True)

def ReplaceAtom(StartingMolecule, NewAtoms, fromAromatic=False, showdiff=False):
    """
    Function to remove atom from a selected list of atoms from a starting molecule.
    
    Args:
    - StartingMolecule: SMILES String of Starting Molecule
    - NewAtoms: List of atoms that could be added to starting molecule
    - FromAromatic: If True, will remove atoms from aromatic rings 
    """
    """
    Steps:
    1. Get the indexes of all the bonds in the molecule 
    2. Check if there are any bonds that are aromatic 
    3. Select index of atom that will be replaced
    4. Get bond and bondtype of atom to be replaced
    5. Create new bond of same type where atom was removed
    """
    StartingMoleculeUnedited = StartingMolecule

    AtomIdxs = []
    for atom in StartingMoleculeUnedited.GetAtoms():
        if fromAromatic == False:
            # Check if atom is Aromatic
            if atom.GetIsAromatic():
                continue
            else:
                AtomIdxs.append(atom.GetIdx())
        else:
            AtomIdxs.append(atom.GetIdx())
            print(f'Number of Bonds atom has = {len(atom.GetBonds())}')

    #Select atom to be deleted from list of atom indexes, check that this list is greater than 0
    if len(AtomIdxs) > 0:
        ReplaceAtomIdx = rnd(AtomIdxs)
    else:
        print('Empty Atom Index List')

    #Exclude replaced atom type from list of atoms to do replacing with
    ReplaceAtomType = StartingMoleculeUnedited.GetAtomWithIdx(ReplaceAtomIdx).GetAtomicNum()
    AtomReplacements = [x for x in NewAtoms if x != ReplaceAtomType]

    StartingMolecule = Chem.RWMol(StartingMoleculeUnedited)

    #Replace atom
    ReplacementAtom = rnd(AtomReplacements)
    StartingMolecule.ReplaceAtom(ReplaceAtomIdx, Chem.Atom(ReplacementAtom), preserveProps=True)

    print(f'{StartingMoleculeUnedited.GetAtomWithIdx(ReplaceAtomIdx).GetSymbol()}\
          replaced with {Chem.Atom(ReplacementAtom).GetSymbol()}')
    
    Mut_Mol = StartingMolecule.GetMol()

    #Sanitize molecule
    Mut_Mol_Sanitized = Chem.SanitizeMol(Mut_Mol, catchErrors=True)

    if showdiff:
        view_difference(StartingMoleculeUnedited, Mut_Mol)

### TESTING ReplaceAtom Function
#ReplaceAtom(rnd(fragments), AtomicNumbers, fromAromatic=False, showdiff=True)


def ReplaceBond(StartingMolecule, Bonds, showdiff=True):
    """
    Function to replace bond type with a different bond type from a selected list of bonds within a starting molecule.
    
    Args:
    - StartingMolecule: SMILES String of Starting Molecule
    - Bonds: List of bonds that could be used to replace bond in starting molecule
    """
    """
    Steps:
    1. Get the indexes of all the bonds in the molecule 
    2. Check if there are any bonds that are aromatic 
    3. Select index of bond that will be replaced
    4. Get index and bondtype of bond to be replaced
    """

    StartingMoleculeUnedited = StartingMolecule

    BondIdxs = []
    for bond in StartingMoleculeUnedited.GetBonds():
            # Check if atom is Aromatic
            if bond.GetIsAromatic():
                continue
            else:
                BondIdxs.append(bond.GetIdx())

    #Select atom to be deleted from list of atom indexes, check that this list is greater than 0

    #Random selection of bond to be replaced
    if len(BondIdxs) > 0:
        ReplaceBondIdx = rnd(BondIdxs)
    else:
        print('Empty Bond Index List')

    #Excluding selected bond's bond order from list of potential new bond orders
    ReplaceBondType = StartingMoleculeUnedited.GetBondWithIdx(ReplaceBondIdx).GetBondType()
    BondReplacements = [x for x in Bonds if x != ReplaceBondType]

    StartingMolecule = Chem.RWMol(StartingMoleculeUnedited)

    #Get atoms that selected bond is bonded to 
    ReplacedBond = StartingMolecule.GetBondWithIdx(ReplaceBondIdx)
    Atom1 = ReplacedBond.GetBeginAtomIdx()
    Atom2 = ReplacedBond.GetEndAtomIdx()

    #Replace bond, randomly selecting new bond order from list of possible bond orders
    StartingMolecule.RemoveBond(Atom1, Atom2)
    StartingMolecule.AddBond(Atom1, Atom2, rnd(BondReplacements))

    Mut_Mol = StartingMolecule.GetMol()

    #Sanitize molecule
    Mut_Mol_Sanitized = Chem.SanitizeMol(Mut_Mol, catchErrors=True)

    if showdiff:
        view_difference(StartingMoleculeUnedited, Mut_Mol)

## TESTING ReplaceAtom Function
#ReplaceBond(rnd(fragments), BondTypes, showdiff=True)


def AddFragment(StartingMolecule, fragments, showdiff=True):

    """
    5. If append to starting molecule terminal atom:
       - Combine starting molecule and fragment into single disconnected Mol object 
       - Split atom indexes of starting molecule and fragment and save in different objects
       - Check number of bonds each atom has in starting molecule and fragment, exclude any atoms with more than 1 bond
       - Randomly pick atom from list of atoms with exactly one bond and store index 
       - Randomly pick atom from list of atoms in fragment and store index
       - Select type of bond to create between selected atom from molecule and from fragment
       - Create bond between selected single bond atom and selected atom from fragment

    6. If creating a branch (joining fragment at one of its terminal atoms) 

       - Select fragment to be added to starting molecule
       - Split atom indexes of starting molecule and fragment and save in different objects
       - Check if fragment is aromatic

       If fragment aromatic:
        - Randomly select unique atom from cyclic molecule
        - Check number of bonds each atom has in starting molecule and fragment, exclude any atoms that don't have 
        exactly two bonds
        - Randomly select one of 2-bonded atoms and store the index of the Atom
        - Create a bond between selected 2-bonded atom and selected atom in cyclic molecule
       
        Else:
        - Check bonds of fragment and select an atom with only one bond 
        - Randomly select an atom in the starting molecule that has exactly two bonds
        - Create bond between selected atoms from fragment and from 
    """

def AddFragment(StartingMolecule, Fragment, showdiff=True):
    """
    Function to add a fragment from a selected list of fragments to starting molecule.
    
    Args:
    - StartingMolecule: SMILES String of Starting Molecule
    - Fragments: List of fragments 
    - showdiff
    - InsertStyle: Whether to add fragment to edge or within molecule
    """
    """
    Steps:
    1. Select fragment to be added to starting molecule 
    2. Determine whether fragment is going to be inserted within or appended to end of molecule
    
    3. If inserting fragment within molecule:
        - Combine starting molecule and fragment into single disconnected Mol object 
        - Split atom indexes of starting molecule and fragment and save in different objects
        - Check number of bonds each atom has in starting molecule and fragment, exclude any atoms that don't have 
        exactly two bonds
        - Get the atom neighbors of selected atom 
        - Remove one of selected atom's bonds with its neighbors, select which randomly but store which bond is severed 
        - Calculate terminal atoms of fragment (atoms with only one bond, will be at least two, return total number of
        fragments, store terminal atom indexes in a list)
        - Randomly select two terminal atoms from terminal atoms list of fragment
        - Create a new bond between each of the neighbors of the target atom and each of the terminal atoms on the 
        fragment, specify which type of bond, with highest likelihood that it is a single bond
    
    """
    StartingMoleculeUnedited = StartingMolecule
    Fragment = Fragment

    # Add fragment to Mol object of starting molecule
    StartingMolecule = Chem.RWMol(StartingMoleculeUnedited)
    StartingMolecule.InsertMol(Fragment)

    # Get indexes of starting molecule and fragment, store them in separate objects 
    frags = Chem.GetMolFrags(StartingMolecule)
    StartMolIdxs = frags[0]
    FragIdxs = frags[1]

    OneBondAtomsMolecule = []
    TwoBondAtomsMolecule = []
    OneBondAtomsFragment = []
    TwoBondAtomsFragment = []

    # Getting atoms in starting molecule with different amount of bonds, storing indexes in list
    for index in StartMolIdxs:
        Atom = StartingMolecule.GetAtomWithIdx(int(index))
        if len(Atom.GetBonds()) == 2:
            TwoBondAtomsMolecule.append(index)
        elif len(Atom.GetBonds()) == 1:
            OneBondAtomsMolecule.append(index)
        else:
            continue

    # Getting atoms in fragment with varying bonds, storing indexes in listv
    for index in FragIdxs:
        Atom = StartingMolecule.GetAtomWithIdx(int(index))
        if len(Atom.GetBonds()) == 1:
            OneBondAtomsFragment.append(index)
        elif len(Atom.GetBonds()) == 2:
            TwoBondAtomsFragment.append(index)

    ### INSERTING FRAGMENT AT RANDOM POINT IN STARTING MOLECULE

    # Select random two bonded atom
    AtomRmv = rnd(TwoBondAtomsMolecule)

    # Get atom neighbor indexes, remove bonds between selected atom and neighbors 
    neighbors = [x.GetIdx() for x in StartingMolecule.GetAtomWithIdx(AtomRmv).GetNeighbors()]

    # Randomly choose which bond of target atom to sever
    SeverIdx = rnd([0,1])

    StartingMolecule.RemoveBond(neighbors[SeverIdx], AtomRmv)

    #Create a bond between the fragment and the now segmented fragments of the starting molecule

    #For situation where bond before target atom is severed
    if SeverIdx == 0:
        StartingMolecule.AddBond(OneBondAtomsFragment[0], AtomRmv - 1, Chem.BondType.SINGLE)
        StartingMolecule.AddBond(OneBondAtomsFragment[1], AtomRmv, Chem.BondType.SINGLE)
    #For situation where bond after target atom is severed
    else:
        StartingMolecule.AddBond(OneBondAtomsFragment[0], AtomRmv + 1, Chem.BondType.SINGLE) 
        StartingMolecule.AddBond(OneBondAtomsFragment[1], AtomRmv, Chem.BondType.SINGLE)

    Mut_Mol = StartingMolecule.GetMol()
    MutMolSMILES = Chem.MolToSmiles(Mut_Mol)
    print(MutMolSMILES)

    Mut_Mol_Sanitized = Chem.SanitizeMol(Mut_Mol, catchErrors=True) 

    if Mut_Mol_Sanitized == rdkit.Chem.rdmolops.SanitizeFlags.SANITIZE_NONE:
        print('Validity Check Passed')
    else:
        print('Validity Check Failed')
    
    if showdiff:
        view_difference(StartingMoleculeUnedited, Mut_Mol)

## TESTING AddFragment Function
#AddFragment(rnd(fragments), rnd(fragments), showdiff=True)


def InsertBezene(StartingMolecule, AromaticMolecule, InsertStyle='Within', showdiff=True):

    """
    Function to insert an aromatic atom into a starting molecule
    
    4. If inserting aromatic ring:
    - Check if fragment is aromatic
    - Combine starting molecule and fragment into single disconnected Mol object 
    - Split atom indexes of starting molecule and fragment and save in different objects
    - Check number of bonds each atom has in starting molecule and fragment, exclude any atoms that don't have 
    exactly two bonds
    - Randomly select one of 2-bonded atoms and store the index of the Atom, and store bond objects of atom's bonds
    - Get the atom neighbors of selected atom 
    - Remove selected atom 
    - Select two unique atoms from cyclic atom
    - Create a new bond between each of the neighbors of the removed atom and each of the terminal atoms on the 
    fragment 
    """

    StartingMoleculeUnedited = rnd(fragments)
    Fragment = fragments[-1] 

    #Always check if fragment is a cyclic (benzene) molecule
    if len(Fragment.GetAromaticAtoms()) != len(Fragment.GetAtoms()):
        print('Atom is not Cyclic')

    Chem.SanitizeMol(Fragment)

    # Add fragment to Mol object of starting molecule
    StartingMolecule = Chem.RWMol(StartingMoleculeUnedited)
    StartingMolecule.InsertMol(Fragment)

    # Get indexes of starting molecule and fragment, store them in separate objects 
    frags = Chem.GetMolFrags(StartingMolecule)
    StartMolIdxs = frags[0]
    FragIdxs = frags[1]

    OneBondAtomsMolecule = []
    TwoBondAtomsMolecule = []

    # Getting atoms in starting molecule with different amount of bonds, storing indexes in lists
    for index in StartMolIdxs:
        Atom = StartingMolecule.GetAtomWithIdx(int(index))
        if len(Atom.GetBonds()) == 2:
            TwoBondAtomsMolecule.append(index)
        elif len(Atom.GetBonds()) == 1:
            OneBondAtomsMolecule.append(index)
        else:
            continue

    if InsertStyle == 'Within':
        # Randomly choose two unique atoms from aromatic molecule
        ArmtcAtoms = sample(FragIdxs, 2)

        # Select random two bonded atom
        AtomRmv = rnd(TwoBondAtomsMolecule)

        # Get atom neighbor indexes, remove bonds between selected atom and neighbors 
        neighbors = [x.GetIdx() for x in StartingMolecule.GetAtomWithIdx(AtomRmv).GetNeighbors()]

        # Randomly choose which bond of target atom to sever
        SeverIdx = rnd([0,1])

        StartingMolecule.RemoveBond(neighbors[SeverIdx], AtomRmv)

        #For situation where bond before target atom is severed
        if SeverIdx == 0:
            StartingMolecule.AddBond(ArmtcAtoms[0], AtomRmv - 1, Chem.BondType.SINGLE)
            StartingMolecule.AddBond(ArmtcAtoms[1], AtomRmv, Chem.BondType.SINGLE)
        #For situation where bond after target atom is severed
        else:
            StartingMolecule.AddBond(ArmtcAtoms[0], AtomRmv + 1, Chem.BondType.SINGLE) 
            StartingMolecule.AddBond(ArmtcAtoms[1], AtomRmv, Chem.BondType.SINGLE)

        Mut_Mol = StartingMolecule.GetMol()
        MutMolSMILES = Chem.MolToSmiles(Mut_Mol)

        Mut_Mol_Sanitized = Chem.SanitizeMol(Mut_Mol, catchErrors=True) 

        if Mut_Mol_Sanitized == rdkit.Chem.rdmolops.SanitizeFlags.SANITIZE_NONE:
            print('Validity Check Passed')
        else:
            print('Validity Check Failed')

    elif InsertStyle == 'Edge':
        # Randomly choose two unique atoms from aromatic molecule
        ArmtcAtoms = rnd(FragIdxs)

        # Select random one bonded atom
        AtomRmv = rnd(OneBondAtomsMolecule)

        StartingMolecule.AddBond(ArmtcAtoms, AtomRmv, Chem.BondType.SINGLE) 

        Mut_Mol = StartingMolecule.GetMol()
        MutMolSMILES = Chem.MolToSmiles(Mut_Mol)

        Mut_Mol_Sanitized = Chem.SanitizeMol(Mut_Mol, catchErrors=True) 

        if Mut_Mol_Sanitized == rdkit.Chem.rdmolops.SanitizeFlags.SANITIZE_NONE:
            print('Validity Check Passed')
        else:
            print('Validity Check Failed')

    if showdiff:
        view_difference(StartingMoleculeUnedited, Mut_Mol)

def ReplaceFragment():
    """
    Function to replace a fragment in a starting molecule with another fragment from a selected list of fragments.
    
    Args:
    - StartingMolecule: SMILES String of Starting Molecule
    - Fragments: List of fragments 
    """

